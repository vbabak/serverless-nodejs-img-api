service: users

frameworkVersion: ">=1.70.0 <2.0.0"

package:
  exclude:
    - tests/**
    - jest.config.js

custom:
  secrets: ${file(secrets.${opt:stage, self:provider.stage}.json)}
  dynamodb:
    stages:
      - dev
    start:
      migrate: true

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  memorySize: 256
  tracing:
    lambda: true
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    REGION: ${self:provider.region}
    S3_BUCKET: ${self:custom.secrets.S3_BUCKET}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"

functions:
  register:
    handler: handlers/user/user-register-handler.register
    events:
      - http:
          path: register
          method: post
          cors: true

  login:
    handler: handlers/auth/login-handler.login
    events:
      - http:
          path: login
          method: post
          cors: true

  uploadImage:
    handler: handlers/images/image-upload-handler.getSignedUrl
    events:
      - http:
          path: get-upload-url
          method: post
          cors: true
          authorizer: verify-token

  verify-token:
    handler: handlers/auth/verify-handler.auth

  metadata:
    handler: handlers/images/metadata-handler.createMetaFile
    events:
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - suffix: .jpg

resources:
  Resources:
    UsersDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    PhotosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: ["PUT"]
              AllowedOrigins: ["*"]

plugins:
  - serverless-offline
  - serverless-dynamodb-local
